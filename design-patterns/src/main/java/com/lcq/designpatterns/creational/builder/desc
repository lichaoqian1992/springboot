一、简介

    1、定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示
    2、主要作用：在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。
    3、如何使用：用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）
    4、解决的问题：
    （1）、方便用户创建复杂的对象（不需要知道实现过程）
    （2）、代码复用性 & 封装性（将对象构建过程和细节进行封装 & 复用）
    5、注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序，一般用来创建更为复杂的对象

二、实现方式

研究了好久发现关于建造者模式的实现例子有好多，有造人、造车、造房子、造世界的...等好多。但归类后有两种实现方式。

    （1）通过Client、Director、Builder和Product形成的建造者模式

    （2）通过静态内部类方式实现零件无序装配话构造

  三、第二种方式

      通过静态内部类方式实现零件无序装配话构造：案例：Android中的AlertDialog

      这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品

  （1）主要有三个角色：抽象建造者、具体建造者、产品

  比第一种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。
  （2）举个例子

  比如麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。
  （3）具体步骤

      1、创建建造者定义麦当劳的产品

      2、创建服务员实现具体产品

      3、服务员随意搭配套餐出售给客户

四、总结
（1）优点

    1、产品的建造和表示分离，实现了解耦。

    2、将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰

    3、增加新的具体建造者无需修改原有类库的代码，易于拓展，符合“开闭原则“。

（2）缺点

    1、产品必须有共同点，限制了使用范围。

    2、如内部变化复杂，会有很多的建造类，难以维护。

（3）应用场景

    1、需要生成的产品对象有复杂的内部结构，这些产品对象具备共性；

    2、隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。

    3、需要生成的对象内部属性本身相互依赖。

    4、适合于一个具有较多的零件（属性）的产品（对象）的创建过程。

作者：斌林诚上
链接：https://www.jianshu.com/p/47329a94f5dc
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。